// ../../../vite.config.shared.ts
import { defineConfig, loadEnv } from "file:///Users/adam.dehaven/Dev/public-ui-components/node_modules/.pnpm/vite@4.4.9_@types+node@18.17.5_sass@1.64.2/node_modules/vite/dist/node/index.js";
import vue from "file:///Users/adam.dehaven/Dev/public-ui-components/node_modules/.pnpm/@vitejs+plugin-vue@4.2.3_vite@4.4.9_vue@3.3.4/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import vueJsx from "file:///Users/adam.dehaven/Dev/public-ui-components/node_modules/.pnpm/@vitejs+plugin-vue-jsx@3.0.1_vite@4.4.9_vue@3.3.4/node_modules/@vitejs/plugin-vue-jsx/dist/index.mjs";
import dns from "dns";
import path, { join } from "path";
import { visualizer } from "file:///Users/adam.dehaven/Dev/public-ui-components/node_modules/.pnpm/rollup-plugin-visualizer@5.9.2/node_modules/rollup-plugin-visualizer/dist/plugin/index.js";
var __vite_injected_original_dirname = "/Users/adam.dehaven/Dev/public-ui-components";
dns.setDefaultResultOrder("verbatim");
var buildVisualizerPlugin = process.env.BUILD_VISUALIZER ? visualizer({
  filename: path.resolve(__vite_injected_original_dirname, `packages/${process.env.BUILD_VISUALIZER}/bundle-analyzer/stats-treemap.html`),
  template: "treemap",
  // sunburst|treemap|network
  sourcemap: true,
  gzipSize: true
}) : void 0;
var sanitizePackageName = (packageName2) => {
  const sanitizedName = (packageName2 || "").replace(/Analytics/g, "Vitals").replace(/analytics/gi, "vitals");
  return sanitizedName;
};
var vite_config_shared_default = defineConfig({
  plugins: [
    vue(),
    vueJsx()
  ],
  resolve: {
    // Use this option to force Vite to always resolve listed dependencies to the same copy (from project root)
    dedupe: ["vue", "vue-router", "@kong/kongponents"],
    alias: {
      "@entities-shared-sandbox": path.resolve(__vite_injected_original_dirname, "packages/entities/entities-shared/sandbox/shared")
    }
  },
  css: {
    preprocessorOptions: {
      scss: {
        // Inject the @kong/design-tokens SCSS variables to make them available for all components.
        additionalData: '@import "@kong/design-tokens/tokens/scss/variables";'
      }
    }
  },
  build: {
    outDir: "./dist",
    cssCodeSplit: false,
    minify: true,
    sourcemap: !!process.env.BUILD_VISUALIZER,
    rollupOptions: {
      // Make sure to externalize deps that shouldn't be bundled into your library
      // If config.build.rollupOptions.external is also set at the package level, the arrays will be merged
      external: ["vue", "vue-router", "@kong/kongponents", "@kong-ui-public/i18n", "axios"],
      output: {
        // Provide global variables to use in the UMD build for externalized deps
        globals: {
          vue: "Vue",
          "vue-router": "VueRouter",
          "@kong-ui-public/i18n": "kong-ui-public-i18n",
          "@kong/kongponents": "Kongponents",
          axios: "axios"
        },
        exports: "named"
      },
      plugins: [
        // visualizer must remain last in the list of plugins
        buildVisualizerPlugin
      ]
    }
  },
  optimizeDeps: {
    include: [
      "vue",
      "vue-router"
    ]
  },
  server: {
    fs: {
      /**
       * Allow serving files from one level up from the package root - IMPORTANT - since this is a monorepo
       */
      allow: [join(__vite_injected_original_dirname, "..")]
    }
  },
  // Change the root when utilizing the sandbox via USE_SANDBOX=true to use the `/sandbox/*` files
  // During the build process, the `/sandbox/*` files are not used and we should default to the package root.
  root: process.env.USE_SANDBOX ? "./sandbox" : process.cwd(),
  // Sets the Vite envDir to point to the repository root `.env.*` files.
  // Please do NOT add other .env files in child directories.
  envDir: "../../../../",
  test: {
    globals: true,
    environment: "jsdom",
    setupFiles: [],
    coverage: {
      reporter: ["text", "json", "html"]
    },
    // TODO: The `registerNodeLoader` setting is deprecated. Commenting out for now but if tests start failing we need to utilize the new `deps.optimizer.web.include` instead
    // deps: {
    //   registerNodeLoader: true, // Ensure modules are imported properly
    // },
    include: ["**/src/**/*.spec.ts"],
    exclude: [
      "**/dist/**",
      "**/__template__/**",
      "**/node_modules/**",
      "packages/core/cli/**"
    ]
  }
});

// vite.config.ts
import { resolve } from "path";
import { defineConfig as defineConfig2, mergeConfig } from "file:///Users/adam.dehaven/Dev/public-ui-components/node_modules/.pnpm/vite@4.4.9_@types+node@18.17.5_sass@1.64.2/node_modules/vite/dist/node/index.js";
var __vite_injected_original_dirname2 = "/Users/adam.dehaven/Dev/public-ui-components/packages/analytics/analytics-utilities";
var packageName = "analytics-utilities";
var sanitizedPackageName = sanitizePackageName(packageName);
var config = mergeConfig(vite_config_shared_default, defineConfig2({
  build: {
    lib: {
      // The kebab-case name of the exposed global variable. MUST be in the format `kong-ui-public-{package-name}`
      // Example: name: 'kong-ui-public-demo-component'
      name: `kong-ui-public-${sanitizedPackageName}`,
      entry: resolve(__vite_injected_original_dirname2, "./src/index.ts"),
      fileName: (format) => format === "cjs" ? `${sanitizedPackageName}.${format}` : `${sanitizedPackageName}.${format}.js`,
      formats: ["es", "umd", "cjs"]
    }
  },
  test: {
    // Include regular `*.spec.ts` files as well as timezone-specific unit test files `*.spec.tz.ts`
    include: ["**/src/**/*.spec(.tz)?.ts"]
  }
}));
if (process.env.PREVIEW_SANDBOX) {
  config.build.rollupOptions.external = void 0;
  config.build.lib = void 0;
}
var vite_config_default = config;
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
